  import { defineComponent, reactive, ref } from "vue";
  引用3.0Vue方式。



setup() {
    const xxx4 = computed(()=>{
        
      业务处理返回xx供vue使用
     return {
            xx1,
            xx2,
            ...
     }
    }

   return {
        xx2,
        xx3,
        xxx4
      }
}

使用方式
 <a-col :span="6">
    <a-form-item :label="xxx4.xx1">
       <span class="content">{{xxx4.xx2}}</span>
   </a-form-item>
</a-col>


ref 响应式元素变动

ref 获取元素


<template> 
  <div id="haha" ref="haha"></div>
</template>

setup(){

    let haha = ref<HTMLElement|null>(null)

    console.log(haha)  

    return {
        haha,
    }
}

reactive 接收一个普通对象然后返回该普通对象的响应式代理对象

setup(){
    let obj = reactive({
        name:"小王",

        age:"19"
    })

    return {
        obj,
    }
}

使用{{obj.name}}

更新obj[name]='xxx'

const currentOilName = computed(()=>{
        let data = store.state.user.currentUser;
        let filed = '';
        let value = '';
        switch (data.userType) {
          case 1:
            filed = '集团账号';
            value = "集团管理账号"
            break;
          case 3:
            filed = '油站名称';
            value = data.stationName;
            break;
          case 2:
            filed = '供应商名称';
            value = data.supplierName;
            console.log(data.supplierName,'data.supplierName');
            break;
          default:
            break;
        }
        return {
          filed,
          value,
        }
      })



 总结：
 使用了script 配置 <script lang="ts"> 采用的vue3


<script lang="ts">
import  导入需要引用的组件
export default defineComponent({})  vue3构建实例的方式  
setup() { return }  是vue3中的一个新的配置项，值为一个函数，我们在组件中用到的数据、方法等等，都要配置在setup中。   返回渲染函数 返回一个对象，中的属性和方法在模板中可以直接使用





v-bind:class 简写 :class


v-on:click 简写 @click


<script>
export default {
  data() {
    return {
      message: '',
      text:''
    }
  }
}
</script>

常规
<input :value="text" @input="event => text = event.target.value"/>
简写
<input v-model="message" placeholder="edit me" />

v-model=""  绑定的数据模型



深入组件

Props 父子组件传递数据

子组件接收父组件的数据

export default{
    name:'demo',
    props:['params1','params2']
    setup(props){
        console.log('setup-------------',props)
    }

}



插槽  <slot> </slot>   具名插槽 <slot slot="header"></slot>




vue 事件常用基础
1.prevent 默认阻止事件
2.stop 默认阻止事件冒泡
3.once 事件只触发一次

捕获是从外往内  冒泡是内往外




computed与watch
计算属性与监听属性



计算属性能实现的 监听属性 也能实现


监听属性能实现的 计算属性不能实现  监听属性能实现异步

所有不被vue


所有被vue管理的函数，最好写成普通函数 这样this指向才是vm或者组件实例
所有不被vue管理的函数，写成箭头函数



最终的目标就是：这样this指向才是vm或者组件实例




setup 关键点：

1.新的配置项，值为一个函数
2.setup是所有的composition api （组合api）
3.组件中所用到:数据 方法等等，均需配置在setup中
4.setup 有两种返回值：
    4.1: 返回一个对象，则是对象中的属性，方法，在模板中可以直接使用
    4.2:返回一个渲染函数，即是 h


5.vue2和vue3注意点：
    
    5.1: vue2 配置 data methods computed 可以访问到setup的属性 方法
    5.2: 但在setup中不能访问到vue2配置（data methods computed...）
    5.3: 重名则setup优先
    5.4: setup不能是一个sync函数，因为返回值不再是return对象，而是promise,模板看不到return对象中的属性。


6.响应式数据处理 ref

js 取值.value 模板读取无需.value

主要是基本类型 响应式依然是Object.defineProperty()的get set完成的。

对象类型主要借助了vue3.新函数 reactive  Proxy代理对象处理




7.响应式数据处理 reactive
    
    处理对象类型响应式数据 主要用于对象，基本数据类型不会用
    const 代理对象 = reactive（源对象）接收一个对象，返回一个代理对象
    深层次的处理数据
    内部基于es6的Proxy实现，通过代理对象操作对象内部数据进行操作

reactive和ref 对比


1.定义数据角度对比：
    -ref定义：基本数据类型
    -reactive：对象 或 数组类型数据
    备注ref也可以定义对象或数组类型数据，它内部会自动通过reactive转为代理对象

2.原理角度对比    
    -ref通过object.defineProperty()的set和get来实现响应式（数据劫持）
    -reactive通过使用Proxy来实现响应式（数据劫持），并通过Reflect{力拍的}操作源对象内部对象的数据


3.使用角度对比
    -ref定义的数据：操作数据需要.value，读取数据时模板中的直接读取不需要.value
    -reative定义的数据：操作数据与读取数据：均不需要.value. 


8.watch 和 watchEffect 函数

watch 需要指明监视的属性，也需要指明监视回调

watchEffect 不要需要指明监视属性，监视回调中调用那个属性，就会监视那个属性

watchEffect 相似  computed

computed注重计算出来的值，回调函数的返回值，并且有返回值。

watchEffect更注重于过程，回调函数的函数体，无须写返回值



toRef toRefs 和 Ref 

用法：const value = toRef(person,'name')

应用：要将响应式对象中的某个属性单独提供给外部使用时。

扩展：toRefs 和 toRef功能一致，创建多个ref对象需要则用toRefs